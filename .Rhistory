color = 'red')
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders),color = 'darkgreen',size =2,shape=2) +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders),color = 'darkgreen',size =2,shape=2,fill ="darkgreen") +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders,fill ="darkgreen"),color = 'darkgreen',size =2,shape=2) +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders,shape=2),color = 'darkgreen',size =2,fill ="darkgreen") +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders),color = 'darkgreen',size =2,shape=22,fill ="darkgreen") +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
library(ggplot2)
fig = ggplot(data = Communities,aes(x=persPoverty,y=murders))+
geom_point()
fig
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders),color = 'darkgreen',size =2,shape=22,fill ="darkgreen") +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
plot(lmSimple$residuals)
#plot(lmSimple$residuals)
mean(lmSimple$residuals)
plot(lmSimple$residuals)
ggstatsplot::ggscatterstats(
data = lmDataTrain,
x = persPoverty,
y = murders,
title = "Droite de régression",
messages = FALSE
)
# Train_Test_Splite
set.seed(1345)
# Pourcentage de donnees correspondant a 25%
per = dim(Communities)[1]%/%4
echantillon <- sample(1:dim(Communities)[1]) |> .[1:per]
install.packages("magrittr")
library(magrittr)
library(magrittr)
library(dplyr)
# Train_Test_Splite
set.seed(1345)
# Pourcentage de donnees correspondant a 25%
per = dim(Communities)[1]%/%4
echantillon <- sample(1:dim(Communities)[1]) %>% .[1:per]
lmDataTrain = Communities[-echantillon,c("murders","persPoverty")]
lmDataTest = Communities[echantillon,c("murders","persPoverty")]
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
plot(lmSimple$residuals)
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders),color = 'darkgreen',
size =2,shape=22,fill ="darkgreen") +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
library(ggplot2)
fig = ggplot(data = Communities,aes(x=persPoverty,y=murders))+
geom_point()
fig
Communities = read.csv("data/Communities.csv",row.names = 1)
knitr::kable(head(Communities,10)[,1:15])
# Correlation matrix
corCom = correlation::correlation(Communities)
# Filtered correlation, bound =0.8
corCom[(corCom$r>0.8) & corCom$Parameter2=='murders',]
library(ggplot2)
fig = ggplot(data = Communities,aes(x=persPoverty,y=murders))+
geom_point()
fig
library(ggplot2)
fig = ggplot(data = Communities,aes(x=persPoverty,y=murders))+
geom_point()
fig
library(dplyr)
# Train_Test_Splite
set.seed(1345)
# Pourcentage de donnees correspondant a 25%
per = dim(Communities)[1]%/%4
echantillon <- sample(1:dim(Communities)[1]) %>% .[1:per]
lmDataTrain = Communities[-echantillon,c("murders","persPoverty")]
lmDataTest = Communities[echantillon,c("murders","persPoverty")]
#Model Training
lmSimple <- lm(murders~persPoverty,data = lmDataTrain)
summary(lmSimple)
ggstatsplot::ggscatterstats(
data = lmDataTrain,
x = persPoverty,
y = murders,
xlab  = "le nombre de personnes sous le seuil de pauvreté",
ylab  = "le nombre de meurtres",
title = "Droite de régression",
messages = FALSE
)
X_test=as.data.frame(lmDataTest[["persPoverty"]])
colnames(X_test)="persPoverty"
y_predict = predict(object = lmSimple,X_test)
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders),color = 'darkgreen',
size =2,shape=22,fill ="darkgreen") +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
plot(lmSimple$residuals)
names(Communities)
X = corCom$Parameter1
x
X
library(dplyr)
library(dplyr)
X = corCom[(corCom$r>0.8) & corCom$Parameter2=='murders',] %>%
.$Parameter1
X
library(dplyr)
Variables = corCom[(corCom$r>0.8) & corCom$Parameter2=='murders',] %>%
.$Parameter1 %>% select(Communities,.)
library(dplyr)
Variables = corCom[(corCom$r>0.8) & corCom$Parameter2=='murders',] %>%
.$Parameter1 %>% select(Communities,all_of(.))
X
cat(X)
library(dplyr)
Variables = corCom[(corCom$r>0.8) & corCom$Parameter2=='murders',] %>%
.$Parameter1 %>% select(Communities,cat(.))
library(dplyr)
lmMultpleDF = Communities %>% select(murders,pop, persUrban, persPoverty,
kidsBornNevrMarr, numForeignBorn,
houseVacant, persEmergShelt, persHomeless)
corr_X = correlation::correlation(lmMultpleDF[,-1])
corr_X
lmMultiple = lm(murders~.,data = lmMultpleDF)
summary(lmMultiple)
lmMultiple = lm(formula =  murders~.,data = lmMultpleDF)
summary(lmMultiple)
# train test split
lmMultiple_Test = lmMultpleDF[echantillon,]
lmMultiple_Train = lmMultpleDF[-echantillon,]
# Model training
lmMultiple = lm(formula =  murders~.,data = lmMultiple_Train)
summary(lmMultiple)
# train test split
lmMultiple_Test = lmMultpleDF[echantillon,]
lmMultiple_Train = lmMultpleDF[-echantillon,]
# Model training
lmMultiple = lm(formula =  murders~.,data = lmMultiple_Train)
summary(lmMultiple)
library(car)
library(car)
avPlots(lmMultiple)
library(dplyr)
## Train test split
lmMultpleDF = lmMultpleDF %>% select(-persUrban)
lmMultiple_Test = lmMultpleDF[echantillon,]
lmMultiple_Train = lmMultpleDF[-echantillon,]
# Model training
lmMultiple = lm(formula =  murders~.,data = lmMultiple_Train)
summary(lmMultiple)
library(car)
avPlots(lmMultiple)
y_hat = predict(lmMultiple,lmMultiple_Test[,-1])
y_hat
y_hat = predict(lmMultiple,lmMultiple_Test[,-1])
head(y_hat,10)
lmMultpleDF|>names()
y_test = lmMultiple_Test$murders
ggplot() +
geom_point(aes(x = y_test, y = y_hat)) +
geom_abline(slope = 1, color ='darkred') +
geom_segment(aes(x =y_test ,
y = y_test, xend = y_test, yend = y_hat),
color = 'red') +
ylab("Predicted murders")+xlab("Murders")
y_test = lmMultiple_Test$murders
ggplot() +
geom_point(aes(x = y_test, y = y_hat)) +
geom_abline(slope = 1, color ='blue') +
geom_segment(aes(x =y_test ,
y = y_test, xend = y_test, yend = y_hat),
color = 'red') +
ylab("Predicted murders")+xlab("Murders")
Communities = read.csv("data/Communities.csv",row.names = 1)
library(dplyr)
library(dplyr)
PCA_df <- Communities %>% select_if(is.numeric)
Communities_PCA <- FactoMineR::PCA(PCA_df,scale.unit=TRUE,graph = TRUE)
Communities_PCA <- FactoMineR::PCA(PCA_df,scale.unit=TRUE,graph = FALSE)
Communities_PCA
Communities_PCA <- FactoMineR::PCA(PCA_df,scale.unit=TRUE,graph = FALSE)
summary(Communities_PCA)
factoextra::fviz_eig(Communities_PCA,addlabels = TRUE)
View(PCA_df)
selection = sample(names(PCA_df))[1:10]
PCA_df = PCA_df[,selection]
set.seed(1346)
selection = sample(names(PCA_df))[1:10]
PCA_df = PCA_df[,selection]
set.seed(1346)
selection = sample(names(PCA_df))[1:10]
PCA_df = PCA_df[,selection]
factoextra::fviz_eig(Communities_PCA,addlabels = TRUE)
set.seed(1346)
selection = sample(names(PCA_df))[1:5]
PCA_df = PCA_df[,selection]
factoextra::fviz_eig(Communities_PCA,addlabels = TRUE)
set.seed(1123)
selection = sample(names(PCA_df))[1:5]
PCA_df = PCA_df[,selection]
factoextra::fviz_eig(Communities_PCA,addlabels = TRUE)
library(dplyr)
PCA_df <- Communities %>% select_if(is.numeric)
Communities_PCA <- FactoMineR::PCA(PCA_df,scale.unit=TRUE,graph = FALSE)
factoextra::fviz_eig(Communities_PCA,addlabels = TRUE)
PCA_df = PCA_df[,selection]
factoextra::fviz_eig(Communities_PCA,addlabels = TRUE)
library(dplyr)
PCA_df <- Communities %>% select_if(is.numeric)
names(PCA_df)
library(dplyr)
PCA_df = PCA_df %>% select(murders,pctWhite,pctBlack,pctEmploy,kidsBornNevrMarr)
factoextra::fviz_eig(Communities_PCA,addlabels = TRUE)
set.seed(1346)
selection = sample(names(PCA_df))[1:10]
PCA_df = PCA_df[,selection]
library(dplyr)
PCA_df <- Communities %>% select_if(is.numeric)
Communities_PCA <- FactoMineR::PCA(PCA_df,scale.unit=TRUE,graph = FALSE)
factoextra::fviz_eig(Communities_PCA,addlabels = TRUE)
set.seed(1346)
selection = sample(names(PCA_df))[1:10]
PCA_df = PCA_df[,selection]
Communities_PCA <- FactoMineR::PCA(PCA_df,scale.unit=TRUE,graph = FALSE)
factoextra::fviz_eig(Communities_PCA,addlabels = TRUE)
set.seed(1345)
selection = sample(names(PCA_df))[1:5]
PCA_df = PCA_df[,selection]
Communities_PCA <- FactoMineR::PCA(PCA_df,scale.unit=TRUE,graph = FALSE)
factoextra::fviz_eig(Communities_PCA,addlabels = TRUE)
set.seed(13)
selection = sample(names(PCA_df))[1:5]
PCA_df = PCA_df[,selection]
Communities_PCA <- FactoMineR::PCA(PCA_df,scale.unit=TRUE,graph = FALSE)
factoextra::fviz_eig(Communities_PCA,addlabels = TRUE)
library(dplyr)
PCA_df <- Communities %>% select_if(is.numeric)
names(PCA_df)
library(dplyr)
set.seed(13)
selection = sample(names(PCA_df))[1:5]
PCA_df = PCA_df %>% select(murders,pctWhite,pctBlack,pctKidsBornNevrMarr,numForeignBorn)
Communities_PCA <- FactoMineR::PCA(PCA_df,scale.unit=TRUE,graph = FALSE)
factoextra::fviz_eig(Communities_PCA,addlabels = TRUE)
library(dplyr)
PCA_df = PCA_df %>% select(murders,pctWhite,pctBlack,pctKidsBornNevrMarr,numForeignBorn)
Communities_PCA <- FactoMineR::PCA(PCA_df,scale.unit=TRUE,graph = T)
factoextra::fviz_eig(Communities_PCA,addlabels = TRUE)
library(dplyr)
PCA_df = PCA_df %>% select(murders,pctWhite,pctBlack,pctKidsBornNevrMarr,
numForeignBorn,pctUnemploy)
library(dplyr)
PCA_df = PCA_df %>% select(murders,pctWhite,pctBlack,pctKidsBornNevrMarr,numForeignBorn,pctUnemploy)
library(dplyr)
PCA_df <- Communities %>% select_if(is.numeric)
library(dplyr)
PCA_df = PCA_df %>% select(murders,pctWhite,pctBlack,
pctKidsBornNevrMarr,numForeignBorn,pctUnemploy)
Communities_PCA <- FactoMineR::PCA(PCA_df,scale.unit=TRUE,graph = F)
factoextra::fviz_eig(Communities_PCA,addlabels = TRUE)
29.3 + 53.1
Com_var<-factoextra::get_pca_var(Communities_PCA)
Com_var
factoextra::fviz_pca_var(Communities_PCA,
col.var = "contrib",
gradient.cols = rainbow(3),
repel = TRUE,
legend.title='Contribution')
factoextra::fviz_pca_var(Communities_PCA,
col.var = "contrib",
gradient.cols = rainbow(3),
repel = TRUE)
names(PCA_df)
factoextra::fviz_pca_ind(Communities_PCA,
col.ind ='cos2',
gradient.cols = rainbow(10),
repel = TRUE,
legend.title = "Cos2 for the variables",
)
factoextra::fviz_pca_ind(Communities_PCA,
col.ind ='cos2',
gradient.cols = rainbow(10),
repel = TRUE,
legend.title = "Cos2",
)
factoextra::fviz_pca_ind(Communities_PCA,
col.ind ='cos2',
gradient.cols = rainbow(10),
repel = TRUE,
legend.title = "Cos2",
)
factoextra::fviz_pca_ind(Communities_PCA,
col.ind ='cos2',
gradient.cols = rainbow(10),
repel = TRUE,
legend.title = "Cos2 for the variables",
)
factoextra::fviz_pca_biplot(Communities_PCA, repel = TRUE,
col.var = rainbow(4)[4],
col.ind = rainbow(1)
)
factoextra::fviz_pca_biplot(Communities_PCA, repel = TRUE,
col.var = rainbow(4)[4],
col.ind = rainbow(1)
)
factoextra::fviz_pca_biplot(Communities_PCA, repel = TRUE,
col.var = rainbow(4)[4],
col.ind = rainbow(1)
) %>% plotly::ggplotly()
factoextra::fviz_pca_biplot(Communities_PCA, repel = TRUE,
col.var = rainbow(4)[4],
col.ind = rainbow(1)
)
factoextra::fviz_pca_biplot(Communities_PCA, repel = TRUE,
col.var = rainbow(4)[4],
col.ind = rainbow(1),addEllipses = T
)
factoextra::fviz_pca_biplot(Communities_PCA, repel = TRUE,
col.var = rainbow(4)[4],
col.ind = rainbow(1)
)
cor(PCA_df$murders,PCA_df$numForeignBorn)
variable819 <- rbind(PCA_df[819,],apply(PCA_df,2,mean),
apply(PCA_df,2,min),
apply(PCA_df,2,max)
) |> dplyr::select(murders,numForeignBorn)
variable819 <- rbind(PCA_df[819,],apply(PCA_df,2,mean),
apply(PCA_df,2,min),
apply(PCA_df,2,max)
) |> dplyr::select(murders,numForeignBorn)
variable819
variable819 <- rbind(PCA_df[819,],apply(PCA_df,2,mean),
apply(PCA_df,2,min),
apply(PCA_df,2,max)
) |> dplyr::select(murders,numForeignBorn) |>
cbind(Value=c('pizza103','mean','min','max'),_)
library(dplyr)
variable819 <- rbind(PCA_df[819,],apply(PCA_df,2,mean),
apply(PCA_df,2,min),
apply(PCA_df,2,max)
) %>%  dplyr::select(murders,numForeignBorn) %>%
cbind(Value=c('pizza103','mean','min','max'),.)
variable819
library(dplyr)
variable819 <- rbind(PCA_df[819,],apply(PCA_df,2,mean),
apply(PCA_df,2,min),
apply(PCA_df,2,max)
) %>%  dplyr::select(murders,numForeignBorn) %>%
cbind(Value=c('Variable819','mean','min','max'),.)
variable819
library(dplyr)
variable819 <- rbind(PCA_df[819,],apply(PCA_df,2,mean),
apply(PCA_df,2,min),
apply(PCA_df,2,max)
) %>%  dplyr::select(murders,numForeignBorn) %>%
`rownames<-`(.,c('Variable819','mean','min','max'))
variable819
bookdown::publish_book('data-analysis','abdouloudoussdiakite@gmail.com')
bookdown::publish_book('data-analysis','abdouloudoussdiakite@gmail.com')
bookdown::publish_book('data-analysis','AODiakite')
Communities = read.csv("data/Communities.csv",row.names = 1)
Communities = read.csv("data/Communities.csv",row.names = 1)
View(Communities)
unique(Communities$communityname)|>length()
unique(Communities$State)|>length()
Communities[[LemasGangUnitDeploy]]
library()
library(dplyr)
Communities %>% select(ends_with("Deploy"))
Communities %>% select(ends_with("loy"))
Communities %>% select(contains("Gang"))
Communities %>% select(contains("Gang")) ->a
View(a)
a[a$gangUnit=="?",]=NA
na.omit(a)|>length()
na.omit(a)|>dim()
names(a)
a$murders=Communities$murders
View(a)
library(ggstatsplot)
ggbetweenstats(
data = a,
x     = gangUnit,
y     = murders,
title = "Boites à moustaches des varietes"
)
library(ggstatsplot)
ggbetweenstats(
data = Communities,
x     = State,
y     = murders,
title = "Boites à moustaches des varietes"
)
summary(aov(murders~gangUnit,data = a))
library(dplyr)
aov_data = Communities %>% select(murders,gangUnit) %>%
mutate(Meaning = case_when("0"~"Non"
"10"~"Oui"
library(dplyr)
aov_data = Communities %>% select(murders,gangUnit) %>%
mutate(Meaning = case_when("0"~"Non",
"10"~"Oui",
"5"~"Part-Time",
TRUE~NA))
library(dplyr)
aov_data = Communities %>% select(murders,gangUnit) %>%
mutate(Meaning = case_when(gangUnit=="0"~"Non",
gangUnit=="10"~"Oui",
gangUnit=="5"~"Part-Time",
TRUE~NA))
library(dplyr)
aov_data = Communities %>% select(murders,gangUnit) %>%
mutate(Meaning = case_when(gangUnit=="0"~"Non",
gangUnit=="10"~"Oui",
gangUnit=="5"~"Part-Time",
gangUnit=="?"~NA))
library(dplyr)
aov_data = Communities %>% select(murders,gangUnit) %>%
mutate(Meaning = case_when(gangUnit=="0"~"Non",
gangUnit=="10"~"Oui",
gangUnit=="5"~"Part-Time",
gangUnit=="?"~NA_character_))
View(aov_data)
library(dplyr)
aov_data = Communities %>% select(murders,gangUnit) %>%
mutate(GangUnit_means = case_when(gangUnit=="0"~"Non",
gangUnit=="10"~"Oui",
gangUnit=="5"~"Part-Time",
gangUnit=="?"~NA_character_))
library(ggstatsplot)
ggbetweenstats(
data = a,
x     = GangUnit_means,
y     = murders,
title = "Boites à moustaches des varietes"
)
library(ggstatsplot)
ggbetweenstats(
data = aov_data,
x     = GangUnit_means,
y     = murders,
title = "Boites à moustaches des crimes"
)
murders_aov = aov(murders~GangUnit_means,data = aov_data)
summary(murders_aov)
summary(aov(murders~State,data = Communities))
Communities = read.csv("data/Communities.csv",row.names = 1)
head(Communities,5)
Communities = read.csv("data/Communities.csv",row.names = 1)
head(Communities,5)
Communities = read.csv("data/Communities.csv",row.names = 1)
knitr::kable(head(Communities,5))
Communities = read.csv("data/Communities.csv",row.names = 1)
knitr::kable(head(Communities,5))
Communities = read.csv("data/Communities.csv",row.names = 1)
Communities = read.csv("data/Communities.csv",row.names = 1)
knitr::kable(head(Communities,5))
Communities = read.csv("data/Communities.csv",row.names = 1)
knitr::kable(head(Communities[,1:5],5))
knitr::kable(head(Communities[,1:5],5))
knitr::kable(head(Communities[,1:10],5))
knitr::kable(head(Communities,5))
dim(Communities)
description = read.csv("data/Description.csv",row.names = 1)
knitr::kable(head(description))
knitr::kable(head(description))
knitr::kable(head(Communities[,1:10],5))
knitr::kable(head(Communities[,1:5],5))
bookdown::publish_book('data-analysis',"AODiakite")
bookdown::publish_book('data-analysis',"AODiakite")
bookdown::publish_book('data-analysis',"AODiakite")
p=1/11
alpha=1/100
a=p*(2-p)
b=(1-p)^2
alpha=alpha^2
a/(b*alpha)
(4*sqrt(2100))/180
x=(4*sqrt(2100))/180
x^2
