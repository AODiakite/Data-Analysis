Communities = read.csv("data/Communities.csv",row.names = 1)
View(Communities)
Communities = read.csv("data/Communities.csv",row.names = 1)
head(Communities,10)
knitr::kable(head(Communities,10))
knitr::kable(head(Communities,10)[,1:15])
summary(Communities)
# Correlation matrix
corCom = correlation::correlation(Communities)
corCom
corCom[1:5,]
# Correlation matrix
corCom = correlation::correlation(Communities)
# Filtered correlation, bound =0.8
corCom[(corCom$r>0.8) & corCom$Parameter1=='murders',]
# Filtered correlation, bound =0.8
corCom[(corCom$r>0.8) & corCom$Parameter2=='murders',]
library(dplyr)
corCom[["Parameter1"]]
corCom[(corCom$r>0.8) & corCom$Parameter2=='murders',][["Parameter1"]]
library(dplyr)
plotdf = Communities %>% select("murders","pop","persUrban","persPoverty",
"kidsBornNevrMarr","numForeignBorn"  ,"houseVacant",
"persEmergShelt","persHomeless" )
plot(plotdf)
library(dplyr)
plotdf = Communities %>% select("murders","pop","persUrban","persPoverty",
"kidsBornNevrMarr","numForeignBorn"  ,"houseVacant",
"persEmergShelt","persHomeless" )
plot(x=plotdf$murders)
corCom[(corCom$r>0.8) & corCom$Parameter2=='murders',]
Communities = read.csv("data/Communities.csv",row.names = 1)
#Delete na values
Communities = na.omit(Communities)
knitr::kable(head(Communities,10)[,1:15])
plot(plotdf$murders,plotdf$persPoverty)
plot(plotdf$murders,plotdf$persPoverty,xlim = c(0,500))
plot(plotdf$murders,plotdf$persPoverty,xlim = c(0,100))
length(plotdf)
for (i in 1:8){
plot(plotdf[,1],plotdf[,1+i])
Sys.sleep(4)
}
Communities = read.csv("data/Communities.csv",row.names = 1,na.strings = "?")
#Delete na values
Communities = na.omit(Communities)
Communities = read.csv("data/Communities.csv",row.names = 1,na.strings = "?")
knitr::kable(head(Communities,10)[,1:15])
# Correlation matrix
corCom = correlation::correlation(Communities)
# Filtered correlation, bound =0.8
corCom[(corCom$r>0.8) & corCom$Parameter2=='murders',]
plot(Communities$murders,Communities$policeField)
plot(Communities$murders,Communities$numForeignBorn)
plot(Communities$murders,Communities$persUrban)
plot(Communities$murders,Communities$policOperBudget)
plot(Communities$murders,Communities$policOperBudget,xlim = c(0,500))
plot(Communities$murders,Communities$kidsBornNevrMarr,xlim = c(0,500))
plot(Communities$murders,Communities$persEmergShelt,xlim = c(0,500))
Communities = read.csv("data/Communities.csv",row.names = 1)
knitr::kable(head(Communities,10)[,1:15])
# Correlation matrix
corCom = correlation::correlation(Communities)
# Filtered correlation, bound =0.8
corCom[(corCom$r>0.8) & corCom$Parameter2=='murders',]
lm(murders~persPoverty,data = Communities)|>summary()
library(ggplot2)
library(ggplot2)
ggplot(data = Communities,aes(x=persPoverty,y=murders))+
geom_point()+geom_smooth(method = 'lm')
range(Communities$murders)
cor(plotdf[,-1])
lm(murders~.,data = plotdf)|>summary()
library(ggplot2)
fig = ggplot(data = Communities,aes(x=persPoverty,y=murders))+
geom_point()
fig
lmSimple <- lm(murders~persPoverty,data = Communities)
summary(lmSimple)
0.25*2215
0.25%*%2215
1/4
2215%/%4
dim(Communities)
echantillon <- sample(1:dim(Communities)[1])
echantillon
# Pourcentage de donnees correspondant a 25%
per = dim(Communities)[1]%/%4
echantillon <- sample(1:dim(Communities)[1]) %>% .[1:per]
echantillon
# Train_Test_Splite
set.seed(1345)
# Pourcentage de donnees correspondant a 25%
per = dim(Communities)[1]%/%4
echantillon <- sample(1:dim(Communities)[1]) %>% .[1:per]
lmDataTrain = Communities[-echantillon,c("murders","persPoverty")]
lmDataTest = Communities[echantillon,c("murders","persPoverty")]
#Model Training
lmSimple <- lm(murders~persPoverty,data = lmDataTrain)
summary(lmSimple)
lmDataTest
y_predict = predict(lmSimple,lmDataTest[["persPoverty"]])
y_predict = predict(lmSimple,lmDataTest[,"persPoverty"])
y_predict = predict(lmSimple,lmDataTest$persPoverty)
y_predict = predict(lmSimple,lmDataTest[,2])
X_test =mDataTest[,2]
X_test =lmDataTest[,2]
y_predict = predict(lmSimple,X_test)
X_test =lmDataTest[,2]
y_predict = predict(object = lmSimple,newdata = X_test)
# Train_Test_Splite
set.seed(1345)
# Pourcentage de donnees correspondant a 25%
per = dim(Communities)[1]%/%4
echantillon <- sample(1:dim(Communities)[1]) %>% .[1:per]
lmDataTrain = Communities[-echantillon,c("murders","persPoverty")]
lmDataTest = Communities[echantillon,c("murders","persPoverty")]
#Model Training
lmSimple <- lm(murders~persPoverty,data = lmDataTrain)
summary(lmSimple)
X_test =lmDataTest[,2]
y_predict = predict(object = lmSimple,newdata = X_test)
na.omit(X_test)
X_test =lmDataTest[,2]
y_predict = predict(object = lmSimple,newdata = X_test)
typeof(X_test)
str(X_test)
str(lmDataTest)
str(lmDataTest$persPoverty)
X_test =as.data.frame(lmDataTest[,2])
y_predict = predict(object = lmSimple,newdata = X_test)
str(X_test)
X_test =as.data.frame(X_test =lmDataTest[,2])
X_test =as.data.frame(x =lmDataTest[,2])
str(X_test)
X_test =as.data.frame(lmDataTest[,2])
y_predict = predict(object = lmSimple,newdata = X_test)
X_test =as.data.frame(lmDataTest[,2])
y_predict = predict(object = lmSimple,newdata = X_test,env =.GlobalEnv)
lmDataTest[,-1] %>% str()
y_predict = predict(object = lmSimple,lmDataTest[,2])
y_predict = predict(object = lmSimple,lmDataTest[,-1])
y_predict = predict(object = lmSimple,as.data.frame(lmDataTest[,-1]))
X_test=as.data.frame(lmDataTest[["persPoverty"]])
X_test=as.data.frame(lmDataTest[["persPoverty"]])
y_predict = predict(object = lmSimple,X_test)
X_test
lmDataTest[,-1]
X_test=as.data.frame(lmDataTest[["persPoverty"]])
colnames(X_test)="persPoverty"
y_predict = predict(object = lmSimple,X_test)
X_test=as.data.frame( "persPoverty" =lmDataTest[["persPoverty"]])
X_test=as.data.frame( persPoverty =lmDataTest[["persPoverty"]])
X_test=as.list( persPoverty =lmDataTest[["persPoverty"]])
X_test=as.data.frame( lmDataTest[["persPoverty"]])
colnames(X_test)="persPoverty"
y_predict = predict(object = lmSimple,X_test)
y_predict
y_test = lmDataTest$persPoverty
ggplot() +
geom_point(aes(x = y_test, y = y_predict)) +
geom_abline(slope = 1, color ='darkred')  # première bissectrice
y_test = lmDataTest$persPoverty
ggplot() +
geom_point(aes(x = y_test, y = y_predict)) +
geom_abline(slope = 1,intercept = 0, color ='darkred')  # première bissectrice
y_test = lmDataTest$murders
ggplot() +
geom_point(aes(x = y_test, y = y_predict)) +
geom_abline(slope = 1,intercept = 0, color ='darkred')  # première bissectrice
names(lmDataTest)
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders),color = 'darkgreen') +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders),color = 'darkgreen',size =0.3) +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders),color = 'darkgreen',size =1) +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders),color = 'darkgreen',size =1.7) +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders),color = 'darkgreen',size =1.7,shape=3) +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders),color = 'darkgreen',size =1.7,shape=25) +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders),color = 'darkgreen',size =1.7,shape=12) +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders),color = 'darkgreen',size =1.7,shape=22) +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders),color = 'darkgreen',size =2,shape=2) +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders),color = 'darkgreen',size =2,shape=2,fill ="darkgreen") +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders,fill ="darkgreen"),color = 'darkgreen',size =2,shape=2) +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders,shape=2),color = 'darkgreen',size =2,fill ="darkgreen") +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders),color = 'darkgreen',size =2,shape=22,fill ="darkgreen") +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
library(ggplot2)
fig = ggplot(data = Communities,aes(x=persPoverty,y=murders))+
geom_point()
fig
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders),color = 'darkgreen',size =2,shape=22,fill ="darkgreen") +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
plot(lmSimple$residuals)
#plot(lmSimple$residuals)
mean(lmSimple$residuals)
plot(lmSimple$residuals)
ggstatsplot::ggscatterstats(
data = lmDataTrain,
x = persPoverty,
y = murders,
title = "Droite de régression",
messages = FALSE
)
# Train_Test_Splite
set.seed(1345)
# Pourcentage de donnees correspondant a 25%
per = dim(Communities)[1]%/%4
echantillon <- sample(1:dim(Communities)[1]) |> .[1:per]
install.packages("magrittr")
library(magrittr)
library(magrittr)
library(dplyr)
# Train_Test_Splite
set.seed(1345)
# Pourcentage de donnees correspondant a 25%
per = dim(Communities)[1]%/%4
echantillon <- sample(1:dim(Communities)[1]) %>% .[1:per]
lmDataTrain = Communities[-echantillon,c("murders","persPoverty")]
lmDataTest = Communities[echantillon,c("murders","persPoverty")]
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
plot(lmSimple$residuals)
ggplot(data =lmDataTest) +
geom_point(aes(persPoverty,murders),color = 'darkgreen',
size =2,shape=22,fill ="darkgreen") +
geom_point(aes(x = persPoverty, y =y_predict), color ='blue') +
geom_segment(aes(x =persPoverty ,
y = murders, xend = persPoverty, yend = y_predict),
color = 'red')
library(ggplot2)
fig = ggplot(data = Communities,aes(x=persPoverty,y=murders))+
geom_point()
fig
